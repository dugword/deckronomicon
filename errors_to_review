packages/ui/display_data.go:288:		return fmt.Errorf("error executing template: %w", err)
packages/agent/interactive/user_input.go:24:			return nil, fmt.Errorf("invalid number: %w", err)
packages/agent/interactive/user_input.go:27:			return nil, fmt.Errorf("number less than zero")
packages/agent/interactive/user_input.go:30:			return nil, fmt.Errorf("number greater than max")
packages/agent/interactive/user_input.go:95:	return false, fmt.Errorf("invalid input: %s", accept)
packages/agent/interactive/user_input.go:102:		return -1, fmt.Errorf("invalid number: %w", err)
packages/agent/interactive/user_input.go:105:		return -1, fmt.Errorf("number less than zero")
packages/agent/interactive/user_input.go:112:		return -1, fmt.Errorf("number greater than max")
packages/agent/interactive/choice_resolver.go:37:		return nil, fmt.Errorf("no choices available")
packages/agent/interactive/choice_resolver.go:42:		return nil, fmt.Errorf("error rendering UI buffer: %w", err)
packages/agent/interactive/choice_resolver.go:68:		return choose.Choice{}, fmt.Errorf("no choices available")
packages/agent/interactive/choice_resolver.go:73:		return choose.Choice{}, fmt.Errorf("error rendering UI buffer: %w", err)
packages/agent/interactive/choice_resolver.go:90:		return []choose.Choice{}, fmt.Errorf("no choices available")
packages/agent/interactive/choice_resolver.go:121:			return []choose.Choice{}, fmt.Errorf("error rendering UI buffer: %w", err)
packages/agent/interactive/interactive.go:53:		return fmt.Errorf("player %s not found in game state", a.playerID)
packages/agent/interactive/interactive.go:58:		return fmt.Errorf("opponent for player %s not found in game state: %v", a.playerID, err)
packages/agent/interactive/interactive.go:74:			return nil, fmt.Errorf("error rendering UI buffer: %w", err)
packages/agent/actionparser/parser.go:87:			return nil, fmt.Errorf("unrecognized command: %s", command)
packages/agent/actionparser/parser.go:103:			return nil, fmt.Errorf("failed to get cards available to play: %w", err)
packages/agent/actionparser/parser.go:120:			return nil, fmt.Errorf("failed to get choices for play command: %w", err)
packages/agent/actionparser/parser.go:129:		return nil, fmt.Errorf("failed to get player %s: %w", playerID, err)
packages/agent/actionparser/parser.go:168:			return choose.ChoicePrompt{}, fmt.Errorf("failed to get player %s: %w", playerID, err)
packages/agent/actionparser/parser.go:196:			return nil, fmt.Errorf("no card selected to play")
packages/agent/actionparser/parser.go:200:			return nil, fmt.Errorf("failed to get player %s: %w", playerID, err)
packages/agent/actionparser/parser.go:204:			return nil, fmt.Errorf("card with ID %s not found in hand", c.CardID)
packages/agent/actionparser/parser.go:243:		return BuildActionResult{}, fmt.Errorf("unrecognized command: %s", req.Command)
packages/agent/actionparser/parser.go:256:		return BuildActionResult{}, fmt.Errorf("failed to get hand for player %s: %w", playerID, err)
packages/agent/actionparser/parser.go:271:		return BuildActionResult{}, fmt.Errorf("no playable card found for '%s'", arg)
packages/agent/actionparser/parser.go:304:		return nil, fmt.Errorf("empty command")
packages/agent/actionparser/parser.go:328:		return nil, fmt.Errorf("unrecognized command: %s", cmd)
packages/game/mtg/cardtypes.go:77:		return "", fmt.Errorf("unknown card type: %s", s)
packages/game/mtg/zone.go:38:	return "", fmt.Errorf(
packages/game/mtg/step.go:43:		return "", fmt.Errorf("unknown step: %s", s)
packages/game/mtg/subtypes.go:218:	return "", fmt.Errorf("unknown Subtype: %s", s)
packages/game/mtg/colors.go:31:		return "", fmt.Errorf("unknown color: %s", s)
packages/game/mtg/colors.go:51:			return Colors{}, fmt.Errorf("failed to parse color: %w", err)
packages/game/mtg/supertypes.go:24:		return "", fmt.Errorf("unknown supertype: %s", s)
packages/game/definition/definition.go:84:			return fmt.Errorf("failed to read card file %s: %w", path, err)
packages/game/definition/definition.go:88:			return fmt.Errorf("failed to unmarshal card data %s: %w", path, err)
packages/game/definition/definition.go:91:			return fmt.Errorf("duplicate card name detected %s: %s", path, card.Name)
packages/game/definition/definition.go:97:		return nil, fmt.Errorf("could not load card definitions in %s directory: %w", path, err)
packages/game/gob/spell.go:138:			return fmt.Errorf("failed to create permanent: %w", err)
packages/game/gob/spell.go:142:			return fmt.Errorf("state does not implement BattlefieldAdder")
packages/game/gob/spell.go:148:			return fmt.Errorf("cannot resolve effect: %w", err)
packages/game/gob/spell.go:153:		return fmt.Errorf("state does not implement CardPlacer")
packages/game/gob/spell.go:157:			return fmt.Errorf("cannot place card in exile: %w", err)
packages/game/gob/spell.go:162:		return fmt.Errorf("cannot move spell to graveyard: %w", err)
packages/game/gob/from_definition.go:39:		return Card{}, fmt.Errorf("failed to create colors: %w", err)
packages/game/gob/from_definition.go:45:			return Card{}, fmt.Errorf("failed to parse mana cost: %w", err)
packages/game/gob/from_definition.go:53:			return Card{}, fmt.Errorf("failed to parse card types: %w", err)
packages/game/gob/from_definition.go:62:			return Card{}, fmt.Errorf("failed to parse subtypes: %w", err)
packages/game/gob/from_definition.go:71:			return Card{}, fmt.Errorf("failed to parse supertypes: %w", err)
packages/game/gob/from_definition.go:86:					return nil, fmt.Errorf("failed to build activated ability: %w", err)
packages/game/gob/from_definition.go:94:				return nil, fmt.Errorf("failed to build static ability: %w", err)
packages/game/gob/activatd_ability.go:46:		return nil, fmt.Errorf("failed to create cost: %w", err)
packages/game/gob/activatd_ability.go:52:				return nil, fmt.Errorf("failed to create effect: %w", err)
packages/game/gob/activatd_ability.go:108:			return fmt.Errorf("cannot resolve effect: %w", err)
packages/game/gob/triggered_ability.go:9:				return fmt.Errorf("failed to create spell from %s: %w", card.Name(), err)
packages/game/gob/permanent.go:66:				return nil, fmt.Errorf("failed to build activated ability: %w", err)
packages/state/library.go:45:	return gob.Card{}, fmt.Errorf("card with ID %s not found", id)
packages/state/library.go:71:	return fmt.Errorf("card with ID %s not found", id)
packages/state/library.go:82:	return gob.Card{}, fmt.Errorf("card with ID %s not found", id)
packages/state/library.go:88:		return gob.Card{}, l, fmt.Errorf("failed to take card by query: %w", err)
packages/state/build_deck.go:20:				return Game{}, nil, fmt.Errorf(
packages/state/build_deck.go:29:				return Game{}, nil, fmt.Errorf(
packages/state/graveyard.go:34:	return gob.Card{}, fmt.Errorf("card witg ID %s not found", id)
packages/state/graveyard.go:52:	return g, fmt.Errorf("card witg ID %s not found", id)
packages/state/graveyard.go:62:	return gob.Card{}, fmt.Errorf("card witg ID %s not found", id)
packages/state/revealed.go:37:	return gob.Card{}, fmt.Errorf("card with id %s not found in revealed zone", id)
packages/state/revealed.go:55:	return fmt.Errorf("card with id %s not found in revealed zone", id)
packages/state/revealed.go:65:	return gob.Card{}, fmt.Errorf("card with id %s not found in revealed zone", id)
packages/state/stack.go:40:	return nil, fmt.Errorf("object with ID %s not found in stack", id)
packages/state/stack.go:58:	return fmt.Errorf("object with ID %s not found in stack", id)
packages/state/stack.go:68:	return nil, fmt.Errorf("object with ID %s not found in stack", id)
packages/state/player.go:47:		return card, p, fmt.Errorf("card %s not found in hand", cardID)
packages/state/player.go:75:		return p, fmt.Errorf("card %s not found in hand", cardID)
packages/state/battlefield.go:35:	return gob.Permanent{}, fmt.Errorf("permanent with ID %s not found", id)
packages/state/battlefield.go:53:	return b, fmt.Errorf("permanent with ID %s not found", id)
packages/state/battlefield.go:67:	return gob.Permanent{}, b, fmt.Errorf("permanent with ID %s not found", id)
packages/state/hand.go:63:	return h, fmt.Errorf("card with ID %s not found", id)
packages/configs/scenerio.go:59:		return nil, fmt.Errorf("failed to read setup file: %w", err)
packages/configs/scenerio.go:63:		return nil, fmt.Errorf("failed to unmarshal setup data: %w", err)
packages/configs/scenerio.go:66:		return nil, fmt.Errorf("scenario requires at least one player")
packages/configs/scenerio.go:86:			return nil, fmt.Errorf(
packages/configs/scenerio.go:92:			return nil, fmt.Errorf(
packages/configs/scenerio.go:129:			return nil, fmt.Errorf(
packages/configs/scenerio.go:136:			return nil, fmt.Errorf(
packages/configs/scenerio.go:159:		return nil, fmt.Errorf(
packages/configs/scenerio.go:166:		return nil, fmt.Errorf(
packages/engine/turn_based_action.go:362:		return choose.ChoicePrompt{}, fmt.Errorf("error getting player: %w", err)
packages/engine/actions.go:77:		return nil, fmt.Errorf("card with ID %s not found in hand", a.cardID)
packages/engine/engine.go:51:		return fmt.Errorf(
packages/engine/engine.go:61:			return fmt.Errorf(
packages/engine/engine.go:71:		return fmt.Errorf(
packages/engine/engine.go:79:			return fmt.Errorf(
packages/engine/engine.go:100:			return fmt.Errorf("deck list for player %s not found", playerID)
packages/engine/engine.go:107:			return fmt.Errorf(
packages/engine/engine.go:116:			return fmt.Errorf(
packages/engine/engine.go:128:		return fmt.Errorf("error starting game: %w", err)
packages/engine/engine.go:133:			return fmt.Errorf("error shuffling decks: %w", err)
packages/engine/engine.go:140:			return fmt.Errorf(
packages/engine/engine.go:161:		return fmt.Errorf("error starting turn: %w", err)
packages/engine/engine.go:165:			return fmt.Errorf("error running phase %s: %w", phase.name, err)
packages/engine/engine.go:169:		return fmt.Errorf("error ending turn: %w", err)
packages/engine/engine.go:172:		return fmt.Errorf("error completing turn: %w", err)
packages/engine/engine.go:180:		return fmt.Errorf("error starting phase %s: %w", phase.name, err)
packages/engine/engine.go:184:			return fmt.Errorf("error running step %s: %w", step.name, err)
packages/engine/engine.go:188:		return fmt.Errorf("error ending phase %s: %w", phase.name, err)
packages/engine/engine.go:196:		return fmt.Errorf("error starting step %s: %w", step.name, err)
packages/engine/engine.go:202:			return fmt.Errorf(
packages/engine/engine.go:210:		return fmt.Errorf("error running priority: %w", err)
packages/engine/engine.go:213:		return fmt.Errorf("error ending step %s: %w", step.name, err)
packages/engine/engine.go:223:		return fmt.Errorf("error applying receive priority event: %w", err)
packages/engine/engine.go:231:			return fmt.Errorf(
packages/engine/engine.go:239:			return fmt.Errorf(
packages/engine/engine.go:247:				return fmt.Errorf("error resetting priority passes: %w", err)
packages/engine/engine.go:252:				return fmt.Errorf("error applying all players passed priority event: %w", err)
packages/engine/apply.go:20:		return fmt.Errorf("apply event: %w", err)
packages/engine/apply.go:26:			return fmt.Errorf("report state: %w", err)
packages/engine/apply.go:70:		return game, fmt.Errorf("unknown turn-based action event type: %T", evnt)
packages/engine/apply.go:89:			return game, fmt.Errorf("shuffle deck: %w", err)
packages/engine/apply.go:95:		return game, fmt.Errorf("unknown event type: %T", evnt)
packages/engine/apply.go:108:		return game, fmt.Errorf("unknown combat event type: %T", evnt)
packages/engine/apply.go:120:			return game, fmt.Errorf("begin turn: %w", err)
packages/engine/apply.go:132:		return game, fmt.Errorf("unknown game lifecycle event type: %T", evnt)
packages/engine/apply.go:147:		return game, fmt.Errorf("unknown turn event type: %T", evnt)
packages/engine/apply.go:173:		return game, fmt.Errorf("unknown priority event type: %T", evnt)
packages/engine/apply.go:253:		return game, fmt.Errorf("unknown begin step event type: %T", beginStepEvent)
packages/engine/apply.go:273:		return game, fmt.Errorf("unknown end phase event type: %T", endPhaseEvent)
packages/engine/apply.go:297:		return game, fmt.Errorf("unknown begin phase event type: %T", beginPhaseEvent)
packages/engine/apply.go:316:		return game, fmt.Errorf("untap: %w", err)
packages/engine/apply.go:330:		return game, fmt.Errorf("draw: %w", err)
packages/engine/apply.go:334:		return game, fmt.Errorf("draw: %w", err)
packages/engine/apply.go:347:		return game, fmt.Errorf("discard: %w", err)
packages/engine/apply.go:351:		return game, fmt.Errorf("discard: %w", err)
packages/engine/apply.go:368:		return game, fmt.Errorf("play land: %w", err)
packages/engine/apply.go:372:		return game, fmt.Errorf("play land: %w", err)
packages/engine/apply.go:376:		return game, fmt.Errorf("play land: %w", err)
packages/engine/apply.go:388:		return game, fmt.Errorf("cast spell: %w", err)
packages/engine/apply.go:393:			return game, fmt.Errorf("cast spell: %w", err)
